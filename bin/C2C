#!/usr/bin/env python
import argparse
import logging
import os
import shutil
import sys
import traceback
from datetime import datetime
from pathlib import Path
from time import time

import dosma
import h5py
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# import voxel as vx
from tqdm import tqdm

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'

from comp2comp.contrast_phase.contrast_phase import ContrastPhaseDetection
from comp2comp.hip.hip import (
    HipComputeROIs,
    HipMetricsSaver,
    HipSegmentation,
    HipVisualizer,
)
from comp2comp.inference_pipeline import InferencePipeline
from comp2comp.io.io import DicomFinder, DicomToNifti
from comp2comp.io.io_utils import get_dicom_paths_and_num
from comp2comp.models.models import Models
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue import (
    MuscleAdiposeTissueComputeMetrics,
    MuscleAdiposeTissueH5Saver,
    MuscleAdiposeTissueMetricsSaver,
    MuscleAdiposeTissuePostProcessing,
    MuscleAdiposeTissueSegmentation,
)
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue_visualization import (
    MuscleAdiposeTissueVisualizer,
)
from comp2comp.organs.organs import OrganSegmentation
from comp2comp.organs.visualization import (
    LiverSpleenPancreasMetricsPrinter,
    LiverSpleenPancreasVisualizer,
)
from comp2comp.spine.spine import (
    AxialCropper,
    SpineComputeROIs,
    SpineCoronalSagittalVisualizer,
    SpineFindDicoms,
    SpineMetricsSaver,
    SpineMuscleAdiposeTissueReport,
    SpineSegmentation,
    SpineToCanonical,
)
from comp2comp.utils.orientation import ToCanonical
from comp2comp.utils.process import process_2d, process_3d

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"


def MuscleAdiposeTissuePipelineBuilder(args):
    pipeline = InferencePipeline([
        MuscleAdiposeTissueSegmentation(16, args.muscle_fat_model),
        MuscleAdiposeTissuePostProcessing(),
        MuscleAdiposeTissueComputeMetrics(),
        MuscleAdiposeTissueVisualizer(),
        MuscleAdiposeTissueH5Saver(),
        MuscleAdiposeTissueMetricsSaver()
        ]
    )
    return pipeline

def MuscleAdiposeTissueFullPipelineBuilder(args):
    pipeline = InferencePipeline([
        DicomFinder(args.input_path),
        MuscleAdiposeTissuePipelineBuilder(args)
        ]
    )
    return pipeline

def SpinePipelineBuilder(path, args):
    pipeline = InferencePipeline([
        DicomToNifti(path),
        SpineSegmentation(args.spine_model),
        SpineToCanonical(),
        SpineComputeROIs(args.spine_model),
        SpineMetricsSaver(),
        SpineCoronalSagittalVisualizer()
        ]
    )
    return pipeline

def AxialCropperPipelineBuilder(path, args):
    pipeline = InferencePipeline([
        DicomToNifti(path),
        SpineSegmentation(args.spine_model),
        ToCanonical(),
        AxialCropper(lower_level="L5", upper_level="L1", save=True)
        ]
    )
    return pipeline

def SpineMuscleAdiposeTissuePipelineBuilder(path, args):
    pipeline = InferencePipeline([
        SpinePipelineBuilder(path, args),
        SpineFindDicoms(),
        MuscleAdiposeTissuePipelineBuilder(args),
        SpineMuscleAdiposeTissueReport()
        ]
    )
    return pipeline

def LiverSpleenPancreasPipelineBuilder(path, args):
    pipeline = InferencePipeline([
        OrganSegmentation(path),
        LiverSpleenPancreasVisualizer(),
        LiverSpleenPancreasMetricsPrinter()
        ]
    )
    return pipeline


def ContrastPhasePipelineBuilder(path, args):
    pipeline = InferencePipeline([
        ContrastPhaseDetection(path)
        ]
    )
    return pipeline

def HipPipelineBuilder(path, args):
    pipeline = InferencePipeline([
        DicomToNifti(path),
        HipSegmentation(args.hip_model),
        ToCanonical(),
        HipComputeROIs(args.hip_model),
        HipMetricsSaver(),
        HipVisualizer()
        ]
    )
    return pipeline

def AllPipelineBuilder(path, args):
    pipeline = InferencePipeline([
        DicomToNifti(path),
        SpineMuscleAdiposeTissuePipelineBuilder(path, args),
        LiverSpleenPancreasPipelineBuilder(path, args),
        HipPipelineBuilder(path, args)
    ])
    return pipeline

def argument_parser():
    parser = argparse.ArgumentParser("Comp2Comp command line interface")
    subparsers = parser.add_subparsers(dest="action")

    # Muscle + fat 
    muscle_adipose_tissue_parser = subparsers.add_parser("muscle_adipose_tissue", 
                                              help="muscle + fat")
    muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default = 'abCT_v0.0.1',
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )

    # Spine
    spine_parser = subparsers.add_parser("spine", help="spine")
    spine_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    spine_parser.add_argument(
        "--spine_model",
        default="ts_spine",
        type=str,
        help="spine model to use for inference",
    )

    # Spine + muscle + fat
    spine_muscle_adipose_tissue_parser = subparsers.add_parser("spine_muscle_adipose_tissue",
                                              help="spine + muscle + fat")
    spine_muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default="abCT_v0.0.1",
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--spine_model",
        default="ts_spine",
        type=str,
        help="spine model to use for inference",
    )
       
    liver_spleen_pancreas = subparsers.add_parser("liver_spleen_pancreas",
                                              help="Segmentation of liver, spleen and pancreas")
    liver_spleen_pancreas.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )

    contrast_phase_parser = subparsers.add_parser("contrast_phase",
                                              help="contrast phase")
    contrast_phase_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )

    hip_parser = subparsers.add_parser("hip", help="hip")
    hip_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    hip_parser.add_argument(
        "--hip_model",
        default="ts_hip",
        type=str,
        help="hip model to use for inference",
    )

    all_parser = subparsers.add_parser("all", help="master")
    all_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    all_parser.add_argument(
        "--muscle_fat_model",
        default="abCT_v0.0.1",
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )
    all_parser.add_argument(
        "--spine_model",
        default="ts_spine",
        type=str,
        help="spine model to use for inference",
    )
    all_parser.add_argument(
        "--hip_model",
        default="ts_hip",
        type=str,
        help="hip model to use for inference",
    )
    return parser


def main():
    args = argument_parser().parse_args()
    if args.action == "muscle_adipose_tissue":
        process_2d(args, MuscleAdiposeTissueFullPipelineBuilder)
    elif args.action == "spine_muscle_adipose_tissue":
        process_3d(args, SpineMuscleAdiposeTissuePipelineBuilder)
    elif args.action == "spine":
        process_3d(args, SpinePipelineBuilder)
    elif args.action == "contrast_phase":
        process_3d(args, ContrastPhasePipelineBuilder)
    elif args.action == "liver_spleen_pancreas":
        process_3d(args, LiverSpleenPancreasPipelineBuilder)
    elif args.action == "hip":
        process_3d(args, HipPipelineBuilder)
    elif args.action == "all":
        process_3d(args, AllPipelineBuilder)
    else:
        raise AssertionError("{} command not supported".format(args.action))


if __name__ == "__main__":
    main()


