#!/usr/bin/env python
import argparse
import os

os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"
os.environ["TF_FORCE_GPU_ALLOW_GROWTH"] = "true"

from comp2comp.contrast_phase.contrast_phase import ContrastPhaseDetection
from comp2comp.hip.hip import (
    HipComputeROIs,
    HipMetricsSaver,
    HipSegmentation,
    HipVisualizer,
)
from comp2comp.inference_pipeline import InferencePipeline
from comp2comp.io.io import DicomFinder, DicomToNifti
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue import (
    MuscleAdiposeTissueComputeMetrics,
    MuscleAdiposeTissueH5Saver,
    MuscleAdiposeTissueMetricsSaver,
    MuscleAdiposeTissuePostProcessing,
    MuscleAdiposeTissueSegmentation,
)
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue_visualization import (
    MuscleAdiposeTissueVisualizer,
)
from comp2comp.organs.organs import OrganSegmentation
from comp2comp.organs.visualization import (
    LiverSpleenPancreasMetricsPrinter,
    LiverSpleenPancreasVisualizer,
)
from comp2comp.spine.spine import (
    AxialCropper,
    SpineComputeROIs,
    SpineCoronalSagittalVisualizer,
    SpineFindDicoms,
    SpineMetricsSaver,
    SpineMuscleAdiposeTissueReport,
    SpineSegmentation,
    SpineToCanonical,
)
from comp2comp.utils.orientation import ToCanonical
from comp2comp.utils.process import process_2d, process_3d

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"


def MuscleAdiposeTissuePipelineBuilder(args):
    pipeline = InferencePipeline(
        [
            MuscleAdiposeTissueSegmentation(16, args.muscle_fat_model),
            MuscleAdiposeTissuePostProcessing(),
            MuscleAdiposeTissueComputeMetrics(),
            MuscleAdiposeTissueVisualizer(),
            MuscleAdiposeTissueH5Saver(),
            MuscleAdiposeTissueMetricsSaver(),
        ]
    )
    return pipeline


def MuscleAdiposeTissueFullPipelineBuilder(args):
    pipeline = InferencePipeline(
        [DicomFinder(args.input_path), MuscleAdiposeTissuePipelineBuilder(args)]
    )
    return pipeline


def SpinePipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            DicomToNifti(path),
            SpineSegmentation(args.spine_model),
            SpineToCanonical(),
            SpineComputeROIs(args.spine_model),
            SpineMetricsSaver(),
            SpineCoronalSagittalVisualizer(format="png"),
        ]
    )
    return pipeline


def AxialCropperPipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            DicomToNifti(path),
            SpineSegmentation(args.spine_model),
            ToCanonical(),
            AxialCropper(lower_level="L5", upper_level="L1", save=True),
        ]
    )
    return pipeline


def SpineMuscleAdiposeTissuePipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            SpinePipelineBuilder(path, args),
            SpineFindDicoms(),
            MuscleAdiposeTissuePipelineBuilder(args),
            SpineMuscleAdiposeTissueReport(),
        ]
    )
    return pipeline


def LiverSpleenPancreasPipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            DicomToNifti(path),
            OrganSegmentation(path),
            LiverSpleenPancreasVisualizer(),
            LiverSpleenPancreasMetricsPrinter(),
        ]
    )
    return pipeline


def ContrastPhasePipelineBuilder(path, args):
    pipeline = InferencePipeline([ContrastPhaseDetection(path)])
    return pipeline


def HipPipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            DicomToNifti(path),
            HipSegmentation(args.hip_model),
            ToCanonical(),
            HipComputeROIs(args.hip_model),
            HipMetricsSaver(),
            HipVisualizer(),
        ]
    )
    return pipeline


def AllPipelineBuilder(path, args):
    pipeline = InferencePipeline(
        [
            DicomToNifti(path),
            SpineMuscleAdiposeTissuePipelineBuilder(path, args),
            LiverSpleenPancreasPipelineBuilder(path, args),
            HipPipelineBuilder(path, args),
        ]
    )
    return pipeline


def argument_parser():
    base_parser = argparse.ArgumentParser(add_help=False)
    base_parser.add_argument("--input_path", type=str, required=True)
    base_parser.add_argument("--output_path", type=str)
    base_parser.add_argument("--overwrite_outputs", action="store_true")

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="pipeline", help="Pipeline to run")

    # Add the help option to each subparser
    muscle_adipose_tissue_parser = subparsers.add_parser(
        "muscle_adipose_tissue", parents=[base_parser]
    )
    muscle_adipose_tissue_parser.add_argument("--muscle_fat_model", default="abCT_v0.0.1", type=str)

    # Spine
    spine_parser = subparsers.add_parser("spine", parents=[base_parser])
    spine_parser.add_argument("--spine_model", default="ts_spine", type=str)

    # Spine + muscle + fat
    spine_muscle_adipose_tissue_parser = subparsers.add_parser(
        "spine_muscle_adipose_tissue", parents=[base_parser]
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model", default="abCT_v0.0.1", type=str
    )
    spine_muscle_adipose_tissue_parser.add_argument("--spine_model", default="ts_spine", type=str)

    liver_spleen_pancreas = subparsers.add_parser("liver_spleen_pancreas", parents=[base_parser])

    contrast_phase_parser = subparsers.add_parser("contrast_phase", parents=[base_parser])

    hip_parser = subparsers.add_parser("hip", parents=[base_parser])
    hip_parser.add_argument(
        "--hip_model",
        default="ts_hip",
        type=str,
    )

    all_parser = subparsers.add_parser("all", parents=[base_parser])
    all_parser.add_argument(
        "--muscle_fat_model",
        default="abCT_v0.0.1",
        type=str,
    )
    all_parser.add_argument(
        "--spine_model",
        default="ts_spine",
        type=str,
    )
    all_parser.add_argument(
        "--hip_model",
        default="ts_hip",
        type=str,
    )
    return parser


def main():
    args = argument_parser().parse_args()
    if args.pipeline == "muscle_adipose_tissue":
        process_2d(args, MuscleAdiposeTissueFullPipelineBuilder)
    elif args.pipeline == "spine_muscle_adipose_tissue":
        process_3d(args, SpineMuscleAdiposeTissuePipelineBuilder)
    elif args.pipeline == "spine":
        process_3d(args, SpinePipelineBuilder)
    elif args.pipeline == "contrast_phase":
        process_3d(args, ContrastPhasePipelineBuilder)
    elif args.pipeline == "liver_spleen_pancreas":
        process_3d(args, LiverSpleenPancreasPipelineBuilder)
    elif args.pipeline == "hip":
        process_3d(args, HipPipelineBuilder)
    elif args.pipeline == "all":
        process_3d(args, AllPipelineBuilder)
    else:
        raise AssertionError("{} command not supported".format(args.action))


if __name__ == "__main__":
    main()
