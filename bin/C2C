#!/usr/bin/env python
import argparse
import logging
import os
import sys
from pathlib import Path
from time import time
import shutil
import traceback

import h5py
import pandas as pd
import dosma
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

# import voxel as vx
from tqdm import tqdm

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'

from comp2comp import metrics
from comp2comp.inference_2d import inference_2d
from comp2comp.models import Models
from comp2comp.nn_unet import spine_seg
from comp2comp.run import find_files, get_dicom_paths_and_num, get_file_names
from comp2comp.utils import dl_utils, spine_utils
from comp2comp.utils.visualization import (
    generate_panel,
    save_binary_segmentation_overlay,
)
from comp2comp.utils.io_utils import find_dicom_files
from comp2comp.inference_pipeline import InferencePipeline

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"


def muscle_adipose_tissue(args):
    output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../outputs")
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    # Each class within InferencePipeline can modify InferencePipeline and access its attributes
    pipeline = InferencePipeline([
        DicomFinder(args.input_path), 
        MuscleAdiposeTissueSegmentation(),
        Visualizer(),
        H5Saver(),
        MetricsSaver(),
        ],
    config={
        "output_dir": output_dir
        }
    )

    pipeline()


def spine_muscle_adipose_tissue(args):
    output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../outputs")
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    # Each class within InferencePipeline can modify InferencePipeline and access its attributes
    pipeline = InferencePipeline([
        DicomSeriesFinder(args.input_path),
        SpineSegmentation(),
        MuscleAdiposeTissueSegmentation(),
        Visualizer(),
        H5Saver(),
        MetricsSaver(),
        ],
    config={
        "output_dir": output_dir
        }
    )

    pipeline()


def argument_parser():
    parser = argparse.ArgumentParser("Comp2Comp command line interface")
    subparsers = parser.add_subparsers(dest="action")

    # Muscle + fat segmentation
    muscle_adipose_tissue_parser = subparsers.add_parser("muscle_adipose_tissue", 
                                              help="muscle + fat segmentation")
    muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default = 'abCT_v0.0.1',
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )

    # Spine segmentation + muscle + fat segmentation
    spine_muscle_adipose_tissue_parser = subparsers.add_parser("spine_muscle_adipose_tissue",
                                              help="spine segmentation and muscle + fat segmentation")
    spine_muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default="abCT_v0.0.1",
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )
    return parser


def main():
    args = argument_parser().parse_args()
    if args.action == "muscle_adipose_tissue":
        muscle_adipose_tissue(args)
    elif args.action == "spine_muscle_adipose_tissue":
        spine_muscle_adipose_tissue(args)
    else:
        raise AssertionError("{} command not supported".format(args.action))


if __name__ == "__main__":
    main()


