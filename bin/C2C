#!/usr/bin/env python
import argparse
import logging
import os
import shutil
import sys
import traceback
from datetime import datetime
from pathlib import Path
from time import time

import dosma
import h5py
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# import voxel as vx
from tqdm import tqdm

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' 
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'

from comp2comp.inference_pipeline import InferencePipeline
from comp2comp.io.io import DicomFinder
from comp2comp.models.models import Models
from comp2comp.muscle_adipose_tissue.muscle_adipose_tissue import *
from comp2comp.spine.spine import *
from comp2comp.utils.run import get_dicom_paths_and_num
from comp2comp.visualization.visualization import (
    MuscleAdiposeTissueVisualizer,
    SpineMuscleAdiposeTissueReport,
)

os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"


def muscle_adipose_tissue(args):
    output_dir = Path(os.path.join(
        os.path.dirname(os.path.abspath(__file__)), 
        "../outputs", 
        datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        ))
    if not os.path.exists(output_dir):
        output_dir.mkdir(parents=True)

    model_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../models")
    if not os.path.exists(model_dir):
        os.mkdir(model_dir)

    pipeline = InferencePipeline([
        DicomFinder(args.input_path),
        MuscleAdiposeTissueSegmentation(16, args.muscle_fat_model),
        MuscleAdiposeTissuePostProcessing(),
        MuscleAdiposeTissueComputeMetrics(),
        MuscleAdiposeTissueVisualizer(),
        MuscleAdiposeTissueH5Saver(),
        MuscleAdiposeTissueMetricsSaver(),
        ],
    config={
        "output_dir": output_dir,
        "model_dir": model_dir
        }
    )

    pipeline()


def spine_muscle_adipose_tissue(args):
    model_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../models")
    if not os.path.exists(model_dir):
        os.mkdir(model_dir)

    date_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    for path, num in get_dicom_paths_and_num(args.input_path):

        st = time()

        print("Processing: ", path, " with ", num, " slices")

        if num < 300:
            print("Number of slices is less than 300, skipping\n")
            continue
        
        print("")

        sys.stdout.flush()

        output_dir = Path(os.path.join(
            os.path.dirname(os.path.abspath(__file__)), 
            "../outputs",
            date_time,
            Path(os.path.basename(path))
            ))

        if not os.path.exists(output_dir):
            output_dir.mkdir(parents=True)

        try:
            pipeline = InferencePipeline([
                SpineSegmentation(path, args.spine_model),
                SpineReorient(),
                SpineComputeROIs(args.spine_model),
                SpineFindDicoms(),
                SpineCoronalSagittalVisualizer(),
                MuscleAdiposeTissueSegmentation(16, args.muscle_fat_model),
                MuscleAdiposeTissuePostProcessing(),
                MuscleAdiposeTissueComputeMetrics(),
                MuscleAdiposeTissueVisualizer(),
                MuscleAdiposeTissueH5Saver(),
                MuscleAdiposeTissueMetricsSaver(),
                SpineMuscleAdiposeTissueReport(),
                ],
            config={
                "output_dir": output_dir,
                "model_dir": model_dir
                }
            )

            pipeline()

            print(f"Finished processing {path} in {time() - st} seconds\n")


        except Exception as e:
            shutil.rmtree(output_dir)
            print(f"ERROR PROCESSING {path}")
            traceback.print_exc()
            sys.exit()
            continue

        

def argument_parser():
    parser = argparse.ArgumentParser("Comp2Comp command line interface")
    subparsers = parser.add_subparsers(dest="action")

    # Muscle + fat segmentation
    muscle_adipose_tissue_parser = subparsers.add_parser("muscle_adipose_tissue", 
                                              help="muscle + fat segmentation")
    muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default = 'abCT_v0.0.1',
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )

    # Spine segmentation + muscle + fat segmentation
    spine_muscle_adipose_tissue_parser = subparsers.add_parser("spine_muscle_adipose_tissue",
                                              help="spine segmentation and muscle + fat segmentation")
    spine_muscle_adipose_tissue_parser.add_argument(
        "--input_path",
        required=True,
        type=str,
        help="path to input directory or file",
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--muscle_fat_model",
        default="abCT_v0.0.1",
        type=str,
        help="muscle + fat segmentation model to use for inference",
    )
    spine_muscle_adipose_tissue_parser.add_argument(
        "--spine_model",
        default="ts_spine",
        type=str,
        help="spine model to use for inference",
    )
    return parser


def main():
    args = argument_parser().parse_args()
    if args.action == "muscle_adipose_tissue":
        muscle_adipose_tissue(args)
    elif args.action == "spine_muscle_adipose_tissue":
        spine_muscle_adipose_tissue(args)
    else:
        raise AssertionError("{} command not supported".format(args.action))


if __name__ == "__main__":
    main()


